import { useState, useEffect } from 'react';
import './App.css';

type Theme = 'light' | 'dark';
type Language = 'he' | 'en';

const translations = {
  he: {
    headerTitle: '◊û◊¢◊®◊õ◊™ ◊û◊©◊™◊û◊©◊ô◊ù - User Login Manager',
    loginTitle: '◊î◊™◊ó◊ë◊®◊ï◊™ ◊ú◊û◊¢◊®◊õ◊™',
    email: '◊û◊©◊™◊û◊© / ◊ì◊ï◊ê"◊ú',
    emailPlaceholder: 'testuser / test@ovu.co.il',
    password: '◊°◊ô◊°◊û◊î',
    passwordPlaceholder: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢',
    rememberMe: '◊ñ◊õ◊ï◊® ◊ê◊ï◊™◊ô',
    forgotPassword: '◊©◊õ◊ó◊™ ◊°◊ô◊°◊û◊î?',
    loginBtn: '◊î◊™◊ó◊ë◊®',
    loggingInBtn: '◊û◊™◊ó◊ë◊®...',
    orDivider: '◊ê◊ï',
    registerBtn: '◊¶◊ï◊® ◊ó◊©◊ë◊ï◊ü ◊ó◊ì◊©',
    statusBadge: '◊û◊¢◊®◊õ◊™ ◊§◊¢◊ô◊ú◊î ◊ï◊û◊ï◊õ◊†◊î',
    langBtn: 'EN',
    backToPortal: '◊ó◊ñ◊®◊î ◊ú◊§◊ï◊®◊ò◊ú',
    themeBtn: (theme: Theme) => theme === 'light' ? 'üåô' : '‚òÄÔ∏è',
    welcomeMsg: (name: string) => `◊©◊ú◊ï◊ù, ${name}!`,
    logoutBtn: '◊î◊™◊†◊™◊ß',
    showPassword: '◊î◊¶◊í ◊°◊ô◊°◊û◊î',
    hidePassword: '◊î◊°◊™◊® ◊°◊ô◊°◊û◊î',
  },
  en: {
    headerTitle: 'User System - User Login Manager',
    loginTitle: 'Login to System',
    email: 'Username / Email',
    emailPlaceholder: 'testuser / test@ovu.co.il',
    password: 'Password',
    passwordPlaceholder: '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢',
    rememberMe: 'Remember me',
    forgotPassword: 'Forgot password?',
    loginBtn: 'Login',
    loggingInBtn: 'Logging in...',
    orDivider: 'or',
    registerBtn: 'Create new account',
    statusBadge: 'System active and ready',
    langBtn: '◊¢◊ë',
    backToPortal: 'Back to Portal',
    themeBtn: (theme: Theme) => theme === 'light' ? 'üåô' : '‚òÄÔ∏è',
    welcomeMsg: (name: string) => `Hello, ${name}!`,
    logoutBtn: 'Logout',
    showPassword: 'Show password',
    hidePassword: 'Hide password',
  },
};

const API_BASE_URL = '/api/ulm';

interface User {
  id: number;
  email: string;
  username: string;
  first_name: string | null;
  last_name: string | null;
  preferred_language: string;
}

function App() {
  const [theme, setTheme] = useState<Theme>('light');
  const [language, setLanguage] = useState<Language>('he');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [user, setUser] = useState<User | null>(null);
  const t = translations[language];

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') as Theme;
    const savedLang = localStorage.getItem('language') as Language;
    const savedToken = localStorage.getItem('access_token');
    const savedUser = localStorage.getItem('user');
    
    if (savedTheme) setTheme(savedTheme);
    if (savedLang) setLanguage(savedLang);
    if (savedToken && savedUser) {
      setUser(JSON.parse(savedUser));
    }
  }, []);

  useEffect(() => {
    document.documentElement.setAttribute('data-theme', theme);
    document.documentElement.setAttribute('dir', language === 'he' ? 'rtl' : 'ltr');
    localStorage.setItem('theme', theme);
    localStorage.setItem('language', language);
  }, [theme, language]);

  const toggleTheme = () => setTheme(prev => prev === 'light' ? 'dark' : 'light');
  const toggleLanguage = () => setLanguage(prev => prev === 'he' ? 'en' : 'he');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.detail || 'Login failed');
      }

      // Save token and user to localStorage
      localStorage.setItem('access_token', data.access_token);
      localStorage.setItem('user', JSON.stringify(data.user));
      setUser(data.user);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('access_token');
    localStorage.removeItem('user');
    setUser(null);
    setUsername('');
    setPassword('');
  };

  return (
    <div className="app">
      <header className="app-header">
        <div className="header-controls">
          <button onClick={toggleLanguage} className="control-btn lang-btn">
            <span>{t.langBtn}</span>
          </button>
          <button onClick={toggleTheme} className="control-btn theme-btn">
            <span>{t.themeBtn(theme)}</span>
          </button>
        </div>
        <h1 className="header-title">{t.headerTitle}</h1>
      </header>

      <main className="main-content">
        <div className="logo-container">
          <div className="logo-icon">üë§</div>
        </div>

        {user ? (
          // Logged in state
          <div className="login-card">
            <h2 className="card-title">{t.welcomeMsg(user.first_name || user.username)}</h2>
            <div className="user-info">
              <p><strong>{t.email}:</strong> {user.email}</p>
              <p><strong>Username:</strong> {user.username}</p>
            </div>
            <button onClick={handleLogout} className="btn btn-primary">
              {t.logoutBtn}
            </button>
          </div>
        ) : (
          // Login form
          <div className="login-card">
            <h2 className="card-title">{t.loginTitle}</h2>
            
            {error && (
              <div className="error-message">
                ‚ö†Ô∏è {error}
              </div>
            )}
            
            <form className="login-form" onSubmit={handleSubmit}>
              <div className="form-group">
                <label>{t.email}</label>
                <input 
                  type="text" 
                  placeholder={t.emailPlaceholder}
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                  disabled={loading}
                />
              </div>
              
              <div className="form-group">
                <label>{t.password}</label>
                <div className="password-input-wrapper">
                  <input 
                    type={showPassword ? 'text' : 'password'}
                    placeholder={t.passwordPlaceholder}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                    disabled={loading}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => setShowPassword(!showPassword)}
                    disabled={loading}
                    title={showPassword ? t.hidePassword : t.showPassword}
                  >
                    {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
              </div>
              
              <div className="form-row">
                <label className="checkbox">
                  <input type="checkbox" disabled={loading} />
                  <span>{t.rememberMe}</span>
                </label>
                <a href="#" className="link">{t.forgotPassword}</a>
              </div>
              
              <button type="submit" className="btn btn-primary" disabled={loading}>
                {loading ? t.loggingInBtn : t.loginBtn}
              </button>
              
              <div className="divider">{t.orDivider}</div>
              
              <button type="button" className="btn btn-secondary" disabled={loading}>
                {t.registerBtn}
              </button>
            </form>
          </div>
        )}

        <div className="status-badge">
          <svg width="22" height="22" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          <span>{t.statusBadge}</span>
        </div>

        <a href="https://ovu.co.il" className="back-link">{t.backToPortal}</a>
      </main>
    </div>
  );
}

export default App;
